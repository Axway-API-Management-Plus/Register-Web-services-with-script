# -----------------------------------------------------------------------------
# Register a WSDL in an API Server
# -----------------------------------------------------------------------------

from java.lang import Integer
from java.util import ArrayList
from nmdeployment import NodeManagerDeployAPI
from com.vordel.client.manager.actions.services import WebServiceGenerator
from com.vordel.es import EntityStoreDelegate
from com.vordel.es.util import ShorthandKeyFinder
from com.vordel.client.manager.actions.services.WebServiceGenerator import BindingInfo
from vtrace import Tracer
from esapi import EntityStoreAPI
import common
from com.vordel.archive.fed import DeploymentArchive

# Set trace to info level
t = Tracer(Tracer.INFO)
# Connects to the Admin Node Manager and downloads a configuration from it
adminNM = NodeManagerDeployAPI.create(common.nm_apiURL, common.userName, common.password)
archive = adminNM.getDeploymentArchiveForServerByName(common.defGroupName, common.defServerName)
es = adminNM.getArchiveEntityStore(archive, '')
entityStore = archive.getEntityStore();
esapi = EntityStoreAPI(entityStore, '')
shkf = ShorthandKeyFinder(esapi.es)

# Gets the Default Services Listener and Web Services Group entities
wsdlURL = 'http://www.webservicex.net/RealTimeMarketData.asmx?WSDL'
listenerGroup = shkf.getEntity('/[NetService]name=Service/[HTTP]name=Default Services')


repo = shkf.getEntity('/[WebServiceRepository]name=Web Service Repository/[WebServiceGroup]name='+common.wsGroup)
if(repo == None):
    t.info("Group " + common.wsGroup + ":is not available")
    repo = shkf.getEntity('/[WebServiceRepository]name=Web Service Repository')
    vals = []
    vals.append([ 'name',common.wsGroup])
    wsGroup = EntityStoreDelegate.create(esapi.es,repo.getPK(),"WebServiceGroup",vals)
else:
    t.info("Group " + common.wsGroup + ":is exist")
    wsGroup = repo

#repo.setStringField('name', 'test')
#print repo
#esapi.updateEntity(repo)
#wsGroup = shkf.getEntity('/[WebServiceRepository]name=Web Service Repository/[WebServiceGroup]name=test')
print wsGroup

# Adds the Web Service to the Default Services
wsg = WebServiceGenerator(esapi.es)

# Get the document, via a retriever
# Set username/password if the WSDL is protected by HTTP Basic Authn
username = 'user'
password = 'pass'
r = wsg.retrieveDocument(wsdlURL, username, password)

# Record how we want to bind the service(s) into our config.
# BindingInfo can encapsulate the listener details, routingURL, and operations to expose. Here we'll run with
# the defaults as generated by the code, but we'll need to say where to expose the listener.
bis = ArrayList()
for service in r.getDocument().getWebServices():
    serviceName = service.getServiceName()
    bis.add(BindingInfo(service, listenerGroup))

t.info("Web Service name :"+serviceName)

escapedWSName = es.escapeField(serviceName)

# Gets the Web Service based on the short hand key and Web Service name
wsObj = shkf.getEntity('/[WebServiceRepository]name=Web Service Repository/[WebServiceGroup]name='+common.wsGroup+'/[WebService]name=' + escapedWSName)

if wsObj == None:
    wsg.addWebServices(wsGroup, r, bis)
    msg = 'Register web service'
    t.info(msg)
else:
    msg = 'updating Web service'
    t.info(msg)
    wsg.updateWebService(wsObj.getPK(),username,password,wsdlURL)

# ------------------------------------------------------------------------------
# Now that the Web Service was added to the locally saved entity store,
# prepare to create a Deployment Package and associated package
# properties (name value pairs)
# Two things need to be associated with the Deployment Package:
# 1. The package properties file
# 2. The updated entitystore
# -----------------------------------------------------------------------------

# 1. Update the policy package properties with a new comment for adding a Web Service
policyProps = archive.getPolicyProperties();
policyProps[DeploymentArchive.VERSIONCOMMENT_DEFAULT_PROPERTY] = msg
archive.updatePolicyProperties(policyProps);
archive.updateConfiguration(esapi.es);

# 2. Update the entity store in the archive
#adminNM.updateArchiveConfiguration(archive, esapi.es)
res = adminNM.deployToServer(common.defGroupName, common.defServerName, archive)

# Handle any deployment failures.
if res.getStatus() != True:
    t.error("Failed to deploy: " + res.getFailureReason())
    t.error("Failures: "+ Integer.toString(res.getErrorCount()))

es.close()
